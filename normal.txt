import streamlit as st
import os
import base64
import streamlit.components.v1 as components
from module import predict_pneumonia_image, classify_fracture, skin_cancer_prediction


# Set Streamlit page configuration
def configure_page():
    st.set_page_config(
        page_title="Medi Assist - AI Diagnosis",
        page_icon="ü©∫",
        layout="wide"
    )



# ---- TOP BAR ----
def top_bar():
    st.markdown(
        """
        <style>
            .top-bar {
                background-color: #0a66c2;
                color: white;
                padding: 10px;
                text-align: center;
                font-size: 18px;
                font-weight: bold;
                border-radius: 5px;
            }
            .top-bar a {
                color: white;
                text-decoration: none;
                font-weight: bold;
            }
        </style>
        <div class="top-bar">
            Developed by <a href="https://www.linkedin.com/in/mohit-dwivedi13" target="_blank">Mohit Dwivedi</a> ü©∫
        </div>
        """,
        unsafe_allow_html=True
    )
    st.title("ü©∫ Medi Assist - AI Diagnosis")

    st.write("""
    ### **AI-Powered Early Disease Detection System**  

    **Medi Assist** is an **AI-driven virtual assistant for doctors**, helping them **save time** by providing rapid and reliable diagnostic insights.  
    It can detect **pneumonia, fractures, and skin cancer** from medical images with high accuracy.

    ### **Key Benefits:**  
    ‚úÖ **Early Detection:** AI-powered analysis for timely medical intervention.  
    ‚úÖ **Time-Saving:** Automates image analysis, reducing doctors‚Äô workload.  
    ‚úÖ **Accessible Healthcare:** Works on low-cost devices, benefiting underprivileged communities.  
    ‚úÖ **Sustainability:** Optimizes resources, reducing unnecessary tests.  
    """)

    st.sidebar.header("How to Use")
    st.sidebar.write("""
        1. Select the disease to detect.
        2. Upload an image or capture one using your camera.
        3. Choose between **front** and **rear camera**.
        4. AI will analyze and provide a **diagnosis** with a **confidence score**.
    """)


# ---- REAR CAMERA COMPONENT ----
def rear_camera_component():
    rear_camera_html = """
        <style>
            video { width: 100%; border-radius: 10px; }
            button { 
                display: block; 
                margin: 10px auto; 
                padding: 10px 15px; 
                font-size: 16px; 
                background-color: #0a66c2; 
                color: white; 
                border: none; 
                cursor: pointer; 
                border-radius: 5px;
            }
        </style>

        <video id="video" autoplay></video>
        <button id="capture">Capture Image</button>
        <canvas id="canvas" style="display:none;"></canvas>

        <script>
            (async () => {
                const constraints = { video: { facingMode: "environment" } };  // Rear Camera
                const stream = await navigator.mediaDevices.getUserMedia(constraints);
                document.getElementById("video").srcObject = stream;

                document.getElementById("capture").addEventListener("click", () => {
                    const video = document.getElementById("video");
                    const canvas = document.getElementById("canvas");
                    const context = canvas.getContext("2d");

                    canvas.width = video.videoWidth;
                    canvas.height = video.videoHeight;
                    context.drawImage(video, 0, 0, canvas.width, canvas.height);

                    const imageData = canvas.toDataURL("image/jpeg");
                    window.parent.postMessage(imageData, "*");
                });
            })();
        </script>
    """
    components.html(rear_camera_html, height=500)


# ---- MAIN UI ----
def main_ui():
    # Disease Selection
    st.write("### Select Disease to Detect:")
    option = st.radio("", ["Detect Pneumonia", "Detect Fracture", "Detect Skin Cancer"])

    # Image Upload or Camera Input
    st.write("### Upload an Image or Capture Using Camera:")
    upload_option = st.radio("", ["Upload an Image", "Capture Using Front Camera", "Capture Using Rear Camera"])

    uploaded_file = None
    captured_image = None
    rear_image_data = None

    if upload_option == "Upload an Image":
        uploaded_file = st.file_uploader("Upload an X-ray Image:", type=["jpg", "png", "jpeg"])

    elif upload_option == "Capture Using Front Camera":
        captured_image = st.camera_input("Capture an Image Using Front Camera")

    elif upload_option == "Capture Using Rear Camera":
        st.write("### Rear Camera View:")
        rear_camera_component()
        rear_image_data = st.text_area("Paste the captured image data here:", "")

    # Process Image
    if uploaded_file or captured_image or rear_image_data:
        image_source = uploaded_file if uploaded_file else captured_image

        # Save Image
        os.makedirs("sample_images", exist_ok=True)
        file_path = os.path.join("sample_images", "captured_image.jpg")

        if rear_image_data:
            image_bytes = base64.b64decode(rear_image_data.split(",")[1])
            with open(file_path, "wb") as f:
                f.write(image_bytes)
        else:
            with open(file_path, "wb") as f:
                f.write(image_source.getbuffer())

        # Display Image
        col1, col2 = st.columns([1, 1])
        with col1:
            st.image(file_path, caption="üñº Uploaded/Captured Image", use_container_width=True)

        with col2:
            st.markdown("#### üîç Prediction Result")
            if option == "Detect Pneumonia":
                label, confidence = predict_pneumonia_image(file_path)
                st.success(f"**{label}**")
                st.write(f"**Confidence Score:** {confidence:.2f}")

            elif option == "Detect Fracture":
                fracture_prediction = classify_fracture(image_path=file_path)
                st.success(f"**{fracture_prediction}**")

            elif option == "Detect Skin Cancer":
                skin_prediction = skin_cancer_prediction(skin_image_path=file_path)
                st.success(f"**{skin_prediction}**")

        # Remove Image After Processing
        os.remove(file_path)

    # ---- FOOTER ----
    st.markdown("---")
    st.markdown(
        """
        <p style="text-align:center;">
            Developed by <a href="https://www.linkedin.com/in/mohit-dwivedi13" target="_blank">Mohit Dwivedi</a>,
            <a href="https://www.linkedin.com/in/charchilraj" target="_blank">Charchil Raj</a>, and 
            <a href="https://www.linkedin.com/in/suryanshrai011" target="_blank">Suryansh Rai</a> | 
            ¬© 2025 Medi Assist
        </p>
        """,
        unsafe_allow_html=True
    )


# ---- MAIN FUNCTION ----
def main():
    configure_page()
    top_bar()
    main_ui()


if __name__ == "__main__":
    main()
    
